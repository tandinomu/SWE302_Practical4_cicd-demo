name: Enhanced CI/CD with Comprehensive Security

on:
  push:
    branches: ["master", "main"]
  pull_request:
    branches: ["master", "main"]
  schedule:
    - cron: "0 2 * * 1"

env:
  JAVA_VERSION: "17"
  MAVEN_OPTS: "-Xmx1024m"

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      code: ${{ steps.changes.outputs.code }}
      dependencies: ${{ steps.changes.outputs.dependencies }}
      docker: ${{ steps.changes.outputs.docker }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            code:
              - 'src/**'
              - '!src/test/**'
            dependencies:
              - 'pom.xml'
              - '.snyk'
            docker:
              - 'dockerfile'
              - 'dockerrun.aws.json'

  test:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.code == 'true' || needs.changes.outputs.dependencies == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"
          cache: maven

      - name: Run unit tests
        run: mvn -B test --file pom.xml

      - name: Generate test coverage report
        run: mvn jacoco:report

  security:
    runs-on: ubuntu-latest
    needs: [changes, test]
    if: always() && (needs.changes.outputs.code == 'true' || needs.changes.outputs.dependencies == 'true' || github.event_name == 'schedule')

    strategy:
      fail-fast: false
      matrix:
        scan-type: [dependencies, code]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"
          cache: maven

      - name: Build project
        run: mvn clean compile -DskipTests

      - name: Run Snyk Dependency Scan
        if: matrix.scan-type == 'dependencies'
        uses: snyk/actions/maven@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium

      - name: Run Snyk Code Security Scan
        if: matrix.scan-type == 'code'
        uses: snyk/actions/maven@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: code test
          args: --severity-threshold=high

  container-security:
    runs-on: ubuntu-latest
    needs: [changes, test]
    if: needs.changes.outputs.docker == 'true' || github.event_name == 'schedule'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"
          cache: maven

      - name: Build application JAR
        run: mvn clean package -DskipTests

      - name: Build Docker image
        run: |
          docker build -t cicd-demo:${{ github.sha }} .
          docker tag cicd-demo:${{ github.sha }} cicd-demo:latest

      - name: Run Snyk Container Scan
        uses: snyk/actions/docker@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: cicd-demo:latest
          args: --severity-threshold=high --file=dockerfile

  monitor:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"
          cache: maven

      - name: Monitor project with Snyk
        uses: snyk/actions/maven@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor
          args: --project-name=${{ github.repository }}-production

  notify:
    runs-on: ubuntu-latest
    needs: [security, container-security]
    if: failure() && github.event_name != 'pull_request'

    steps:
      - name: Log security alert
        run: |
          echo "Security vulnerabilities detected in ${{ github.repository }}"
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"